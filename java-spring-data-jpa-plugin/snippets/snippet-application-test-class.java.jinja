
    /**
     * Coffee Studio's <b>java-spring-data-jpa-plugin</b> configuration:<br/><br/>
     *
     * That's a simple way to guarantee that essential configuration properties set by this plugin are correctly defined
     * as expected in both {@code application.yaml} and {@code application-test.yaml} files.
     */
    @Test
    @DisplayName("validate 'java-spring-data-jpa-plugin' configuration properties")
    void validateSpringDataJpaPluginConfig() {
    {% if database_name_formatted == 'h2' %}
        assertAll("spring datasource config",
                () -> _assertPropertyEquals("org.h2.Driver", "spring.datasource.driverClassName"),
                () -> _assertPropertyEquals("jdbc:h2:mem:test_db", "spring.datasource.url"),
                () -> _assertPropertyEquals("sa", "spring.datasource.username"),
                () -> _assertPropertyEquals("sa", "spring.datasource.password")
        );
        assertAll("spring h2 config",
                () -> _assertPropertyEquals("false", "spring.h2.console.enabled")
        );
    {% endif %}
    {% if database_name_formatted == 'postgresql' %}
        assertAll("spring datasource config",
                () -> _assertPropertyEquals("org.testcontainers.jdbc.ContainerDatabaseDriver", "spring.datasource.driverClassName"),
                () -> _assertPropertyEquals("jdbc:tc:postgresql:14.5:////test_db", "spring.datasource.url"),
                () -> _assertPropertyEquals("postgres", "spring.datasource.username"),
                () -> _assertPropertyEquals("postgres", "spring.datasource.password")
        );
    {% endif %}
    {% if database_name_formatted == 'mysql' %}
        assertAll("spring datasource config",
                () -> _assertPropertyEquals("org.testcontainers.jdbc.ContainerDatabaseDriver", "spring.datasource.driverClassName"),
                () -> _assertPropertyEquals("jdbc:tc:mysql:8.0.30:////test_db", "spring.datasource.url"),
                () -> _assertPropertyEquals("mysql", "spring.datasource.username"),
                () -> _assertPropertyEquals("mysql", "spring.datasource.password")
        );
    {% endif %}
        assertAll("spring datasource config - connection pool (HikariCP)",
                () -> _assertPropertyEquals("false", "spring.datasource.hikari.auto-commit"),
                () -> _assertPropertyEquals("20", "spring.datasource.hikari.maximum-pool-size"),
                () -> _assertPropertyEquals("10000", "spring.datasource.hikari.connection-timeout"),
                () -> _assertPropertyEquals("5000", "spring.datasource.hikari.validation-timeout"),
                () -> _assertPropertyEquals("1800000", "spring.datasource.hikari.max-lifetime"),
                () -> _assertPropertyEquals("60000", "spring.datasource.hikari.leak-detection-threshold")
        );
    {% if database_name_formatted == 'mysql' %}
        // MySQL JDBC Statement Caching
        // https://vladmihalcea.com/mysql-jdbc-statement-caching/
        assertAll("spring datasource config - MySQL JDBC Statement Caching",
                () -> _assertPropertyEquals("false", "spring.datasource.hikari.data-source-properties.useServerPrepStmts"),
                () -> _assertPropertyEquals("true", "spring.datasource.hikari.data-source-properties.cachePrepStmts"),
                () -> _assertPropertyEquals("100", "spring.datasource.hikari.data-source-properties.prepStmtCacheSize"),
                () -> _assertPropertyEquals("1024", "spring.datasource.hikari.data-source-properties.prepStmtCacheSqlLimit")
        );
    {% endif %}
        assertAll("spring jpa config",
                () -> _assertPropertyEquals("true", "spring.jpa.generate-ddl"),
                () -> _assertPropertyEquals("true", "spring.jpa.show-sql"),
                () -> _assertPropertyEquals("false", "spring.jpa.open-in-view"),
                () -> _assertPropertyEquals("update", "spring.jpa.hibernate.ddl-auto"),
                () -> _assertPropertyEquals("true", "spring.jpa.properties.hibernate.format_sql"),
                () -> _assertPropertyEquals("UTC", "spring.jpa.properties.hibernate.jdbc.time_zone"),
                () -> _assertPropertyEquals("15", "spring.jpa.properties.hibernate.jdbc.batch_size"),
                () -> _assertPropertyEquals("true", "spring.jpa.properties.hibernate.jdbc.order_inserts"),
                () -> _assertPropertyEquals("true", "spring.jpa.properties.hibernate.jdbc.order_updates"),
                () -> _assertPropertyEquals("true", "spring.jpa.properties.hibernate.jdbc.batch_versioned_data"),
                () -> _assertPropertyEquals("true", "spring.jpa.properties.hibernate.connection.provider_disables_autocommit"),
                () -> _assertPropertyEquals("true", "spring.jpa.properties.hibernate.query.in_clause_parameter_padding"),
                () -> _assertPropertyEquals("true", "spring.jpa.properties.hibernate.query.fail_on_pagination_over_collection_fetch"),
                () -> _assertPropertyEquals("4096", "spring.jpa.properties.hibernate.query.plan_cache_max_size")
        );
    }

