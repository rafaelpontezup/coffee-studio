schema-version: v2
kind: plugin
metadata:
  name: java-spring-data-jpa-plugin
  display-name: Java and Spring Data JPA plugin
  description: Plugin to enable and configure Spring Data JPA in Spring Boot Java applications
  version: 1.1.0
  picture: plugin.png
spec:
  type: app
  compatibility:
    - maven
    - application.yaml
    - java
    - spring
  about: docs/about.md
  implementation: docs/implementation.md
  release-notes: docs/release-notes-0.0.1.md
  requirements: docs/requirements.md
  technologies: # Ref: https://docs.stackspot.com/content-creator/studio/yaml-files/plugin-yaml/#technologies
    - Api
  inputs:
    - label: Choose one database (RDBMS)
      name: database_name
      type: text
      items:
        - H2
        - PostgreSQL
        - MySQL
      help: If you don't have an infra for your database yet, you can use the H2 since it's an in-memory relational database.
  computed-inputs:
    database_name_formatted: "{{database_name | lower}}"
    project_base_package: "{{global_cs_project_base_package}}"
    project_base_package_dir: "{{global_cs_project_base_package_dir}}"
    src_main_base_package_dir: "src/main/java/{{project_base_package_dir}}"
    src_test_base_package_dir: "src/test/java/{{project_base_package_dir}}"
    src_test_application_test_java_classpath_dir: "src/test/java/{{global_cs_application_test_java_classpath_dir}}"
    
  hooks:
    ##
    # Edit application.yaml
    ##
    - type: edit
      path: src/main/resources/application.yaml
      trigger: after-render    
      changes:
        - search:
            string: "spring:"
            insert-after:
              snippet: snippets/snippet-application.yaml.jinja
            when:
              not-exists: "datasource:"
    ##
    # Edit application-test.yaml
    ##
    - type: edit
      path: src/test/resources/application-test.yaml
      trigger: after-render    
      changes:
        - search:
            string: "spring:"
            insert-after:
              snippet: snippets/snippet-application-test.yaml.jinja
            when:
              not-exists: "datasource:"
    ##
    # Edit pom.xml
    ##
    - type: edit
      path: pom.xml
      trigger: after-render    
      changes:
        - search:
            string: "</dependencies>"
            insert-before:
              snippet: snippets/snippet-pom.xml.jinja
            when:
              not-exists-snippet: snippets/snippet-pom.xml.jinja
    ##
    # Create or edit docker-compose.yaml
    ##
    - type: render-templates
      trigger: after-render
      path: snippets/docker-postgresql
      condition:
        variable: database_name_formatted
        operator: ==
        value: postgresql

    - type: render-templates
      trigger: after-render
      path: snippets/docker-mysql
      condition:
        variable: database_name_formatted
        operator: ==
        value: mysql
    ##
    # Edit {AppName}ApplicationTests.java
    ##
    - type: edit
      path: "{{src_test_application_test_java_classpath_dir}}"
      trigger: after-render
      changes:
        - search:
            string: "private void _assertPropertyEquals("
            insert-before:
              snippet: snippets/snippet-application-test-class.java.jinja
              when:
                not-exists: "void validateSpringDataJpaPluginConfig()"
    ##
    # Create samples code
    ##
    - type: render-templates
      trigger: after-render
      path: snippets/samples